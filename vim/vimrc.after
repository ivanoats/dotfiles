set background=light
colorscheme solarized
" nmap <silent> <C-D> :NERDTreeToggle<CR>
" imap <silent> <C-D> <Esc>:NERDTreeToggle<CR>
nmap <C-a> ^
imap <C-a> <C-o>^
nmap <C-e> $
imap <C-e> <C-o>$
inoremap <D-CR> <C-O>o
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
nmap <D-O> ! open file:///%:p<CR>
command! W w !sudo tee % > /dev/null
command! Push !git push
set wrap
if has("autocmd")
  autocmd! bufwritepost .vimrc.after source ~/.vimrc.after
endif
nmap <leader>v :tabedit ~/.vimrc.after<CR>
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
  echo a:cmdline
  let expanded_cmdline = a:cmdline
  for part in split(a:cmdline, ' ')
     if part[0] =~ '\v[%#<]'
        let expanded_part = fnameescape(expand(part))
        let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
     endif
  endfor
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:    ' . a:cmdline)
  call setline(2, 'Expanded Form:  ' .expanded_cmdline)
  call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !'. expanded_cmdline
  setlocal nomodifiable
  1
endfunction
function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
  \ | wincmd p | diffthis
nmap <Leader>ht :!ctags --exclude=*.js --extra=+f -R *<CR><CR>
nmap <Leader>h :noh<CR>
augroup VimperatorYPentadactyl
  au! BufRead vimperator-*,pentadactyl-* nnoremap <buffer> ZZ :call FormFieldArchive() \| :silent write \| :bd \| :macaction hide:<CR>
  au BufRead vimperator-*,pentadactyl-* imap <buffer> ZZ <Esc>ZZ
augroup END
command! SpellCheck setlocal spell spelllang=en_us
command! -bar -nargs=1 OpenURL :!open <args>
let g:rails_ctags_arguments='--languages=-javascript --exclude=.git --exclude=log ~/.rvm/gems/ruby-1.9.3-p392/*'
let g:neocomplcache_enable_at_startup = 1
set colorcolumn=80
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd BufWritePre *.rb :call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.yaml :call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.feature :call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.erb :call <SID>StripTrailingWhitespaces()
autocmd BufWritePre Cheffile :call <SID>StripTrailingWhitespaces()
autocmd BufWritePre Rakefile :call <SID>StripTrailingWhitespaces()

set clipboard=unnamed

function! s:FoldItBlock()
  let start = search('^\s*\(it\|specify\|describe\|scenario\|before\).*do\s*$', 'We')
  let end   = search('end', 'We')
  let cmd = (start+1).','.(end).'fold'
  if (start > 0) && (start < end)
    execute cmd
    return 1
  else
    return 0
  endif
endfunction

function! FoldAllItBlocks()
  let position = line('.')
  exe cursor(1,1)
  let result = 1

  while result == 1
    let result = s:FoldItBlock()
  endwhile

  call cursor(position, 1)
endfunction
let g:ctrlp_dotfiles=1

"enable ruby folding, default to unfolded
let ruby_fold=1
set foldlevelstart=99

"ruby
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
"improve autocomplete menu color
highlight Pmenu ctermbg=238 gui=bold

"coffeescript folding
au BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab

" On enter update/create tags
autocmd VimEnter * call UpdateOrCreateTagsFile()

" On write just update tags of this file
"autocmd BufWritePost *.rb call writefile(split(system("sort -u <(touch tags && grep -v " . expand('%:%') . " tags) <(ctags --language-force=ruby -u -f - " . shellescape(expand('%:%')) . " | grep " . expand('%:r') . ")"),"\n"),"tags")
 
" Create tagsfile (if it doesn't exist)
" or update tags file if it is too old
" currently doesn't handle same-name classes well ...
fun! UpdateOrCreateTagsFile()
  let mtime_tags = getftime("tags")
  let mtime_gemfile = getftime("Gemfile.lock")

  if mtime_gemfile > 0 && (mtime_tags == -1 || mtime_gemfile > mtime_tags)
    echom "Generating tags as Gemfile.lock is newer than tags"
    let tempfile = tempname()
    call writefile(["#!/bin/bash","ctags -R --language-force=ruby -u -f tags", "rm $0"], tempfile)
    silent! execute ":!bash " . tempfile . " &"
  endif
endfun

let g:syntastic_ruby_exec='/Users/ivan/.rvm/rubies/ruby-1.9.3-p392/bin/ruby'
let g:ctrlp_custom_ignore = {'dir': '\.git$\|\.hg$\|\.svn$\|doc$\|coverage$\|\.chef$','file': '.DS_Store'}

fun! PullAndRefresh()
  !git pull
  bufdo e!
endfun

nmap <leader>gr call PullAndRefresh()
set mouse=r
"let g:neocomplcache_enable_at_startup = 1
nnoremap <leader>m :silent !open -a Marked.app '%:p'<cr>
